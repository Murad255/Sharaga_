// Внутренний датчик температуры в atmega328 
/*
 * Скетч измеряет внутреннюю темппературу кристалла
 * Применимо для следующих микропроцессоров
 * ATmega168A : Yes
 * ATmega168P : Yes
 * ATmega328 : Yes
 * ATmega328P : Yes
 * ATmega1280 (Arduino Mega) : No
 * ATmega2560 (Arduino Mega 2560) : No
 * ATmega32U4 (Arduino Leonardo) : Yes 
 * 
 * В некоторых микроконтроллерах серии ATmega является встроенный датчик температуры, показания которого можно прочитать, используя внутренний АЦП.
 * К сожалению показания внутреннего датчика температуры не могут быть использована для измерения температуры окружающей среды в связи с прогревом 
 * микроконтроллера во время работы, но показания внутреннего датчика температуры могут быть использованы как элемент защиты микроконтроллера от 
 * перегрева. Так же при измерении температуры с внутреннего датчика следует учесть что показания могут быть занижены на 10 градусов Цельсия 
 * (потребуется смещение), а точность измерения будет в пределах 2 градусов Цельсия.
 * Для точных температур каждый отдельный чип должен быть откалиброван.
 * Но в данном случае наш датчик не откалиброван, и согласно документации заводская калибровка имеет точность +- 10C. Для калибровки температуры 
 * можно, например, поднести к ATMEGA328 кубик льда и ждать, пока температура не стабилизируется примерно на 7C. Поскольку вода меняет свое 
 * состояние из жидкого в твердое при 0C, то температуру кубика льда можно считать 0C. Если предположить, что в данном случае обеспечивается 
 * достаточная теплопроводность, то температура кристалла также должна быть близка к 0C. Исходя из этого, мы теперь знаем, что показание 7C 
 * слишком велико для датчика, поэтому к формуле вычисления температуры добавим смещение,
 */
 
#define NUM_LAB  3    // Номер лабораторной работы
#define OFFSET   0    // Смещение полученное при калибровке ДОБАВЛЯЕТСЯ к измерению
// Функция вывода стартового экрана
// Входной параметр - номер примера
void msgStart(uint8_t ex)
{
	Serial.print(F("\n"));
	Serial.print(F("Laboratory work "));Serial.println(NUM_LAB);
	Serial.print(F("Example "));Serial.println(ex);
	Serial.print(F("Build firmware "));Serial.print(__TIME__); Serial.print(" ");Serial.println(__DATE__);
	Serial.print(F("Microcontroller frequency [Mhz] "));Serial.println(F_CPU/1000000);
    extern int __heap_start, *__brkval; 
    int v; 
    int fr = (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval); 
    Serial.print(F("Free ram: ")); Serial.println(fr);
	Serial.print(F("Start code ----->\n"));
}

void setup(){
  Serial.begin(115200);
  msgStart(5);
  ADMUX |= (1 << REFS1)|(1 << REFS0);    // внутренний источник опорного напряжения на 1.1 вольт
  ADMUX |= (1 << MUX3);                  // датчик температуры
  ADCSRA |= (1 << ADEN);                 // включение АЦП
  ADCSRA |= (1 << ADPS2);                // CLK/16
  }

void loop(){
  float t=0.0;
  ADCSRA |= (1 << ADSC);                 // начало преобразования
  while (bit_is_set(ADCSRA, ADSC));      // ожидание завершения преобразования
  t = (ADCW - 314) / 1.22;               // расчет температуры ADCW = (ADCH << 8) | ADCL
  if (t<120.0) Serial.println(t+OFFSET,1);      // Убрать первое значение
  delay(1000);
  }  


  
